<MGOperator.m>
function [u] = MGOperator(g,u,level,MGParam)

nl = length(g);
hl = 1/(nl+1);

if level == 0
  Al = gallery('tridiag',nl,-1.0/hl,2.0/hl,-1.0/hl);
  % Direct solve at the coarsest level.
  u = Al\g;
else
  % Pre-smoothing.
  u = smooth(g,u,MGParam.m1,MGParam.omega); 
  cGr = restriction(getResidual(g,u));
  nlm1 = (nl+1)/2-1;
  cGc = zeros(nlm1,1);
  % Compute the coarse-grid correction with recursive MG call.
  for sig = 1:MGParam.p                     
    cGc = MGOperator(cGr,cGc,level-1,MGParam);
  end
  % Correct the solution using coarse-grid correction.
  u = u+prolongation(cGc);
  % Post-smoothing.
  u = smooth(g,u,MGParam.m2,MGParam.omega); 
end

end--------------
<coarseGridCorrection.m>
function [cgc] = coarseGridCorrection(res)

n1 = length(res);
cgc = zeros(n1,1);
n0 = (n1+1)/2-1;
h0 = 1/(n0+1);
A0 = gallery('tridiag',n0,-1.0/h0,2.0/h0,-1.0/h0);

cgc = prolongation(A0\restriction(res));

end--------------
<getResidual.m>
function [res] = getResidual(f,u)

nl = length(f);
hl = 1.0/(nl+1);
res = zeros(nl,1);

res(1) = f(1)-(2.0*u(1)-u(2))/hl;

res(2:nl-1) = f(2:nl-1)-(-u(1:nl-2)+2*u(2:nl-1)-u(3:nl))/hl;

res(nl) = f(nl)-(-u(nl-1)+2.0*u(nl))/hl; 

end--------------
<multiGridSolver.m>
function [u,errVals,kStop] = multiGridSolver(u,f,MGParam,uExact)

L = MGParam.L;
nL = MGParam.nL;
kMax = MGParam.kMax;
tol = MGParam.tol;
errVals = zeros(kMax,3);

hL = 1/(nL+1);
x = linspace(hL,1.0-hL,nL)';

k = 0;
err = tol+1.0;

while ((k < kMax) & (err > tol))
  
  uo = u;
  u = MGOperator(f,u,L,MGParam);

  err = norm(uExact-u,2)
  errVals(k+1,2) = norm(u-uo,2);
  errVals(k+1,3) = err;
  k = k+1
  
end

kStop = k;

end--------------
<poisson1dMG.m>
clear

%
% Set multigrid parameters.
nL = 255;
hL = 1/(nL+1);
L = 7;
p = 1;
m1 = 3;
m2 = 3;
omega = 2/3;
tol = 1e-09;
kMax = 20;

%
% Check mesh coarsening.
nl = nL;
for k = L-1:-1:0
  if mod(nl+1,2) ~= 0
    disp('Coarsening error: L is too large.')
    return
  end
  nl = (nl+1)/2-1;
end

%
% Give a random initial guess.
SEED = 1234;
rng(SEED);
u = rand(nL,1)-0.5;
rate = 1.0;

%
% Construct the exact solution and necessary forcing vector.
x = linspace(hL,1.0-hL,nL)';
AL = gallery('tridiag',nL,-1.0/hL,2.0/hL,-1.0/hL);
uExact = exp(sin(3.0*pi*x))-1.0;
f = AL*uExact;

MGParam.nL = nL;
MGParam.L = L;
MGParam.p = p;
MGParam.m1 = m1;
MGParam.m2 = m2;
MGParam.omega = omega;
MGParam.tol = tol;
MGParam.kMax = kMax;

%
% Call the solver.
[u,errVals,kStop] = multiGridSolver(u,f,MGParam,uExact);

figure(1)
clf

plot(x,u,'k-','LineWidth',1.5)
xlabel('$x$','Interpreter','latex');
ylabel('$u_L(x)$','Interpreter','latex');
title('Finite Element Approximation of the Poisson Equation');
axis([0.0,1.0,-1.0,2.0])
printstr = strcat('Solution_nL_',num2str(nL),'.pdf');
exportgraphics(gca, printstr)

figure(2)
clf

semilogy(errVals(1:kStop,3),'bo','LineWidth',1.5)
hold on
semilogy(errVals(1:kStop,2),'rs','LineWidth',1.5)
hold on

%
% Estimate the rate of contraction:
rate = 1.0;
if kStop >= 4 
  kv = [kStop-3:kStop];
  le = log(errVals(kStop-3:kStop,3));
  p1 = polyfit(kv,le,1);
  rate = exp(p1(1));
  p1k = polyval(p1,[1:kStop]);
  semilogy([1:kStop],exp(p1k),'-k')
end

xlabel('$k$','Interpreter','latex');
title('Multigrid Iteration Errors', ...
  'Interpreter','latex');
legend('$\left\|{\bf u}_L^{\rm E}-{\bf u}_L^k\right\|_L$', ...
  '$\left\|{\bf u}_L^k-{\bf u}_L^{k-1} \right\|_L$', ...
  'log-linear fit','Interpreter','latex');
text(1.5,128*tol,strcat( ...
  '$\gamma_{\rm comp} =\hspace{.1cm}$', ...
  num2str(rate,'%10.5e')),'FontSize',14, ...
  'Interpreter','latex')
text(1.5,32*tol,strcat('$m_1 =\hspace{.1cm}$', ...
  num2str(MGParam.m1)),'FontSize',14, ...
  'Interpreter','latex')
text(1.5,8*tol,strcat('$m_2 =\hspace{.1cm}$', ...
  num2str(MGParam.m2)),'FontSize',14, ...
  'Interpreter','latex')
text(1.5,2*tol,strcat('$p =\hspace{.1cm}$', ...
  num2str(MGParam.p)),'FontSize',14, ...
  'Interpreter','latex')
text(1.5,0.5*tol,strcat('$\omega =\hspace{.1cm}$', ...
  num2str(MGParam.omega)),'FontSize',14, ...
  'Interpreter','latex')
printstr = strcat('Err_nL_',num2str(nL), ...
  '_m1_',num2str(MGParam.m1), '_omega_', ...
  num2str(MGParam.omega),'.pdf');
exportgraphics(gca, printstr)
hold off--------------
<poisson1dTG.m>
clear

n1 = 255;
h1 = 1/(n1+1);
m1 = 3;
omega = 2/3;
tol = 1e-09;
kMax = 20;
%
% Seed a random intial guess.
SEED = 1234;
rng(SEED);
u = rand(n1,1)-0.5;
%
% Construct the exact solution and necessary forcing vector.
x = linspace(h1,1.0-h1,n1)';
A1 = gallery('tridiag',n1,-1.0/h1,2.0/h1,-1.0/h1);
uExact = exp(sin(3.0*pi*x))-1.0;
f = A1*uExact;

[u,errVals,kStop] = twoGridSolver(u,f,n1,m1,omega,kMax, ...
  tol,uExact);

figure(1)
clf

plot(x,u,'k-','LineWidth',1.5)
xlabel('$x$','Interpreter','latex');
ylabel('$u_1(x)$','Interpreter','latex');
title('Finite Element Approximation of the Poisson Equation');
axis([0.0,1.0,-1.0,2.0])
printstr = strcat('Solution_n1_',num2str(n1),'.pdf');
exportgraphics(gca, printstr)

figure(2)
clf

semilogy(errVals(1:kStop,3),'bo','LineWidth',1.5)
hold on
semilogy(errVals(1:kStop,2),'rs','LineWidth',1.5)
hold on
%
% Estimate the rate of contraction:
rate = 1.0;
if kStop >= 4
  kv = [kStop-3:kStop];
  le = log(errVals(kStop-3:kStop,3));
  p1 = polyfit(kv,le,1);
  rate = exp(p1(1));
  p1k = polyval(p1,[1:kStop]);
  semilogy([1:kStop],exp(p1k),'-k')
end

xlabel('$k$','Interpreter','latex');
title('Multigrid Iteration Errors', ...
  'Interpreter','latex');
legend('$\left\|{\bf u}_1^{\rm E}-{\bf u}_1^k\right\|_1$', ...
  '$\left\|{\bf u}_1^k-{\bf u}_1^{k-1} \right\|_1$', ...
  'log-linear fit','Interpreter','latex');
text(1.5,128*tol,strcat( ...
  '$\gamma_{\rm comp} =\hspace{.1cm}$', ...
  num2str(rate,'%10.5e')),'FontSize',14, ...
  'Interpreter','latex')
text(1.5,32*tol,strcat('$m_1 =\hspace{.1cm}$', ...
  num2str(m1)),'FontSize',14, ...
  'Interpreter','latex')
text(1.5,8*tol,strcat('$\omega =\hspace{.1cm}$', ...
  num2str(omega)),'FontSize',14, ...
  'Interpreter','latex')
printstr = strcat('Err_n1_',num2str(n1), ...
  '_m1_',num2str(m1), '_omega_', ...
  num2str(omega),'.pdf');
exportgraphics(gca, printstr)
hold off--------------
<prolongation.m>
function [vProl] = prolongation(v)

nc = length(v);
nf = 2*(nc+1)-1;
vProl = zeros(nf,1);

vProl( 1) = v( 1)/2.0;
vProl(nf) = v(nc)/2.0;

vProl(2:2:2*nc  ) =  v(1:nc);
vProl(3:2:2*nc-1) = (v(1:nc-1)+v(2:nc))/2.0;

end--------------
<restriction.m>
function [vRest] = restriction(v)

nf = length(v);
nc = (nf+1)/2-1;
vRest = zeros(nc,1);

vRest(1:nc) = 0.5*(v(1:2:2*nc-1)+v(3:2:2*nc+1))+v(2:2:2*nc);

end--------------
<smooth.m>
function [u] = smooth(f,u,m,omega)

if m == 0
  return
end

nl = length(f);
hl = 1/(nl+1);
z = zeros(nl,1);
omegaPrime = 1.0-omega;

for j = 1:m

  z(1) = (hl*f(1)+u(2))/2.0;
  z(2:nl-1) = (hl*f(2:nl-1)+u(1:nl-2)+u(3:nl))/2.0;
  z(nl) = (hl*f(nl)+u(nl-1))/2.0;

  z(1:nl) = omega*z(1:nl)+omegaPrime*u(1:nl);

  u = z;
  
end

end--------------
<twoGridSolver.m>
function [u,errVals,kStop] = twoGridSolver(u,f,n1,m1,omega, ...
  kMax,tol,uExact)

errVals = zeros(kMax,3);

res = zeros(n1,1);
cgc = zeros(n1,1);
rate = 1.0;

h1 = 1/(n1+1);
x = linspace(h1,1.0-h1,n1)';

k = 0;
err = tol+1.0;

while ((k<kMax) & (err > tol))
  
  u = smooth(f,u,m1,omega);
  res = getResidual(f,u);
  cgc = coarseGridCorrection(res);
  u = u+cgc;

  err = norm(uExact-u,2)
  errVals(k+1,2) = norm(cgc,2);
  errVals(k+1,3) = err;
  k = k+1
  
end

kStop = k;

end--------------
